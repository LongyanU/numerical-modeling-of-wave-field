Subroutine Wave_Field_Modeling(delt_x,delt_z,delt_h,reflect_coefficient,fre_wavelet,delay_source_t0,nt,delt_t,&
                               n_source,ige,ig1,ig2,nx,nz,ml,is,js,Input_file_modelpar,Output_file_snapx,&
                               Output_file_snapz,Output_file_recordx,Output_file_recordz)
  Implicit None
  Real :: delt_x,delt_z,delt_h
  Real :: reflect_coefficient
  Real :: fre_wavelet,delay_source_t0
  Integer :: nt
  Real :: delt_t
  Integer :: n_source
  Real :: ige,ig1,ig2
  Integer :: nx,nz,ml
  Integer :: is,js
  Character *(*) :: Input_file_modelpar
  Character *(*) :: Output_file_snapx,Output_file_snapz
  Character *(*) :: Output_file_recordx,Output_file_recordz
  Real :: c11,c13,c33,c44,c66                                     !c11,c13,c33,c44,c66为刚度系数
  Real :: p11,p12,p22                                             !p11,p12,p22分别为固相密度、流相密度、耦合密度
  Real :: R                                                       !R为描述孔隙流体的弹性参数
  Real :: Q1,Q3                                                   !Q1,Q3为耦合参数
  Real :: w11,w33                                                 !b11,b33为耗散参数   
  Real :: vx(-ml:nx+ml,-ml:nz+ml,2),vz(-ml:nx+ml,-ml:nz+ml,2)     !vx,vz分别是固相x方向速度分量和z方向速度分量
  Real :: vxf(-ml:nx+ml,-ml:nz+ml,2),vzf(-ml:nx+ml,-ml:nz+ml,2)   !vxf,vzf分别是流相x方向速度分量和z方向速度分量
  Real :: txx(-ml:nx+ml,-ml:nz+ml,2),tzz(-ml:nx+ml,-ml:nz+ml,2),&
          txz(-ml:nx+ml,-ml:nz+ml,2)                              !txx,tzz,txz分别是三个应力分量
  Real :: ts(-ml:nx+ml,-ml:nz+ml,2)                               !ts为流相有效应力
  Real :: vxxi1(ml,-ml:nz+ml,2),vxxi2(ml,-ml:nz+ml,2),&	          !左、右 边界 
          vxxj1(-ml:nx+ml,ml,2),vxxj2(-ml:nx+ml,ml,2)             !上、下 边界 
  Real :: vxzi1(ml,-ml:nz+ml,2),vxzi2(ml,-ml:nz+ml,2),&	          !左、右 边界 
          vxzj1(-ml:nx+ml,ml,2),vxzj2(-ml:nx+ml,ml,2)             !上、下 边界 
  Real :: vzxi1(ml,-ml:nz+ml,2),vzxi2(ml,-ml:nz+ml,2),&	          !左、右 边界 
          vzxj1(-ml:nx+ml,ml,2),vzxj2(-ml:nx+ml,ml,2)             !上、下 边界 
  Real :: vzzi1(ml,-ml:nz+ml,2),vzzi2(ml,-ml:nz+ml,2),&	          !左、右 边界 
          vzzj1(-ml:nx+ml,ml,2),vzzj2(-ml:nx+ml,ml,2)             !上、下 边界
  Real :: vxfxi1(ml,-ml:nz+ml,2),vxfxi2(ml,-ml:nz+ml,2),&	        !左、右 边界 
          vxfxj1(-ml:nx+ml,ml,2),vxfxj2(-ml:nx+ml,ml,2)           !上、下 边界 
  Real :: vxfzi1(ml,-ml:nz+ml,2),vxfzi2(ml,-ml:nz+ml,2),&	        !左、右 边界 
          vxfzj1(-ml:nx+ml,ml,2),vxfzj2(-ml:nx+ml,ml,2)           !上、下 边界
  Real :: vzfxi1(ml,-ml:nz+ml,2),vzfxi2(ml,-ml:nz+ml,2),&	        !左、右 边界 
          vzfxj1(-ml:nx+ml,ml,2),vzfxj2(-ml:nx+ml,ml,2)           !上、下 边界 
  Real :: vzfzi1(ml,-ml:nz+ml,2),vzfzi2(ml,-ml:nz+ml,2),&	        !左、右 边界 
          vzfzj1(-ml:nx+ml,ml,2),vzfzj2(-ml:nx+ml,ml,2)           !上、下 边界
  Real :: t1xi1(ml,-ml:nz+ml,2),t1xi2(ml,-ml:nz+ml,2),&           !左、右 边界 
          t1xj1(-ml:nx+ml,ml,2),t1xj2(-ml:nx+ml,ml,2)             !上、下 边界      t1=txx
  Real :: t1zi1(ml,-ml:nz+ml,2),t1zi2(ml,-ml:nz+ml,2),&           !左、右 边界
          t1zj1(-ml:nx+ml,ml,2),t1zj2(-ml:nx+ml,ml,2)             !上、下 边界
  Real :: t2xi1(ml,-ml:nz+ml,2),t2xi2(ml,-ml:nz+ml,2),&           !左、右 边界	    t2=tzz  
          t2xj1(-ml:nx+ml,ml,2),t2xj2(-ml:nx+ml,ml,2)             !上、下 边界
  Real :: t2zi1(ml,-ml:nz+ml,2),t2zi2(ml,-ml:nz+ml,2),&           !左、右 边界
          t2zj1(-ml:nx+ml,ml,2),t2zj2(-ml:nx+ml,ml,2)             !上、下 边界        
  Real :: t3xi1(ml,-ml:nz+ml,2),t3xi2(ml,-ml:nz+ml,2),&           !左、右 边界	    t3=txz
          t3xj1(-ml:nx+ml,ml,2),t3xj2(-ml:nx+ml,ml,2)             !上、下 边界
  Real :: t3zi1(ml,-ml:nz+ml,2),t3zi2(ml,-ml:nz+ml,2),&           !左、右 边界
          t3zj1(-ml:nx+ml,ml,2),t3zj2(-ml:nx+ml,ml,2)             !上、下 边界
  Real :: tsxi1(ml,-ml:nz+ml,2),tsxi2(ml,-ml:nz+ml,2),&           !左、右 边界
          tsxj1(-ml:nx+ml,ml,2),tsxj2(-ml:nx+ml,ml,2)             !上、下 边界
  Real :: tszi1(ml,-ml:nz+ml,2),tszi2(ml,-ml:nz+ml,2),&           !左、右 边界
          tszj1(-ml:nx+ml,ml,2),tszj2(-ml:nx+ml,ml,2)             !上、下 边界
  Real :: vxt(nx,nt),vzt(nx,nt)                                   !vxt,vzt分别是固相地震记录x分量和z分量
  Real :: vxft(nx,nt),vzft(nx,nt)
  Real :: xx,zz
  Real :: Vp,Vpf                                                 !Vps,Vpf分别为固相纵波速度和流相纵波速度
  Real :: dx,dz,dxf,dzf
  Real :: qx(1:ml),qz(1:ml),qxf(1:ml),qzf(1:ml)                  !**************************************
  Real :: qxd(1:ml),qzd(1:ml),qxdf(1:ml),qzdf(1:ml)
  Real :: r1,r2
  Real :: temp
  Real :: D1,D2,D3
  Integer(Kind=2) :: head(120)
  Integer(Kind=2) :: irecl1,irecl2                                !写入的一笔记录的长度
  Integer :: ii1,ii2,jj1,jj2                                      !震源区域范围
  Real :: ef1,ef2,ef3,ef4                                         !差分方程系数
  Integer :: nt2,it,iit
  Integer :: n_file,n_file2                                       !需要产生的文件个数(需小于999)
  Character(len=9) :: filename1_x,filename1_z
  Character(len=11) :: filename2_x,filename2_z
  Character(len=4) :: file_extension
  Character(len=80) :: Output_filename_x,Output_filename_z
  Character(len=16) :: vx_file,vz_file
  Character(len=16),Allocatable :: snapshot_x(:),snapshot_z(:)    !所产生的多个文件的文件名
  Character(len=18),Allocatable :: seismogram_x(:),seismogram_z(:)
  Real :: time
  Real :: fx
  Real :: dxz
  Real :: fc0
  Real :: s1,s2
  Integer :: nx1,nz1
  Integer :: count
  Integer :: irec
  Integer :: ii
  Real :: a11,a12,a13,a14,a21,a22,a23,a24
  Real :: b11,b12,b13,b14,b21,b22,b23,b24
  Real :: d11,d12,d13,d14,d21,d22,d23,d24
  Real :: e11,e12,e13,e14,e21,e22,e23,e24
  Integer :: i,j,k
  Character(len=19) :: Outpath1,Outpath2
  
  Outpath1='Output_Result_固相\'
  Outpath2='Output_Result_流相\'
  
  r1=delt_t/(delt_x*2.0)
  r2=delt_t/(delt_z*2.0)
  
  Open(13,file=Input_file_modelpar,status='old')
  Read(13,*)
  Read(13,*) xx,zz,c11,c13,c33,c44,p11,p12,p22,R,Q1,Q3,w11,w33
  Close(13)
  
  temp=p12**2-p11*p22
  D1=p11/temp
  D2=p12/temp
  D3=p22/temp
  
  Vp=sqrt(c33/p11)                   !***此处在处理边界时需注意：固相最大速度与流相最大速度不同，因为密度不同*******
  Vpf=sqrt(c33/p12)
  dx=3.0*log(1.0/reflect_coefficient)*Vp/(2.0*ml*delt_x)
  dz=3.0*log(1.0/reflect_coefficient)*Vp/(2.0*ml*delt_z)
  Do i=1,ml
    qx(i)=delt_t*dx*((ml-i)*delt_x/(ml*delt_x))**2
    qz(i)=delt_t*dz*((ml-i)*delt_z/(ml*delt_z))**2
    qxd(i)=1.0/(1.0+qx(i))
    qzd(i)=1.0/(1.0+qz(i))
  End Do
    
  vx=0.0;vz=0.0;vxf=0.0;vzf=0.0 
  txx=0.0;tzz=0.0;txz=0.0;ts=0.0
  vxxi1=0.0;vxxi2=0.0;vxxj1=0.0;vxxj2=0.0
  vxzi1=0.0;vxzi2=0.0;vxzj1=0.0;vxzj2=0.0
  vzxi1=0.0;vzxi2=0.0;vzxj1=0.0;vzxj2=0.0
  vzzi1=0.0;vzzi2=0.0;vzzj1=0.0;vzzj2=0.0
  vxfxi1=0.0;vxfxi2=0.0;vxfxj1=0.0;vxfxj2=0.0
  vxfzi1=0.0;vxfzi2=0.0;vxfzj1=0.0;vxfzj2=0.0
  vzfxi1=0.0;vzfxi2=0.0;vzfxj1=0.0;vzfxj2=0.0
  vzfzi1=0.0;vzfzi2=0.0;vzfzj1=0.0;vzfzj2=0.0
  t1xi1=0.0;t1xi2=0.0;t1xj1=0.0;t1xj2=0.0
  t1zi1=0.0;t1zi2=0.0;t1zj1=0.0;t1zj2=0.0
  t2xi1=0.0;t2xi2=0.0;t2xj1=0.0;t2xj2=0.0
  t2zi1=0.0;t2zi2=0.0;t2zj1=0.0;t2zj2=0.0
  t3xi1=0.0;t3xi2=0.0;t3xj1=0.0;t3xj2=0.0
  t3zi1=0.0;t3zi2=0.0;t3zj1=0.0;t3zj2=0.0
  tsxi1=0.0;tsxi2=0.0;tsxj1=0.0;tsxj2=0.0
  tszi1=0.0;tszi2=0.0;tszj1=0.0;tszj2=0.0

!----------------生成波场快照文件名开始-------------------------
  n_file=int(nt/400)   !用于输出固相
  Allocate(snapshot_x(1:n_file),snapshot_z(1:n_file))
  filename1_x='snapshotx'
  filename1_z='snapshotz'
  file_extension='.sgy'
  Output_filename_x='snapshots_x.txt'
  Output_filename_z='snapshots_z.txt'
  
  Call Create_file(n_file,filename1_x,file_extension,snapshot_x,Output_filename_x,Outpath1)
  Call Create_file(n_file,filename1_z,file_extension,snapshot_z,Output_filename_z,Outpath1)
  
  n_file2=int(ig2/20.0+0.5)
  Allocate(seismogram_x(1:n_file2),seismogram_z(1:n_file2))
  filename2_x='seismogramx'
  filename2_z='seismogramz'
  file_extension='.dat'
  Output_filename_x='seismogram_x.txt'
  Output_filename_z='seismogram_z.txt'
  
  Call Create_file(n_file2,filename2_x,file_extension,seismogram_x(:),Output_filename_x,Outpath1)
  Call Create_file(n_file2,filename2_z,file_extension,seismogram_z(:),Output_filename_z,Outpath1)
  
  n_file=int(nt/400)   !用于输出流相
  filename1_x='snapshotx'
  filename1_z='snapshotz'
  file_extension='.sgy'
  Output_filename_x='snapshots_x.txt'
  Output_filename_z='snapshots_z.txt'
  
  Call Create_file(n_file,filename1_x,file_extension,snapshot_x,Output_filename_x,Outpath2)
  Call Create_file(n_file,filename1_z,file_extension,snapshot_z,Output_filename_z,Outpath2)
  
  n_file2=int(ig2/20.0+0.5)
  filename2_x='seismogramx'
  filename2_z='seismogramz'
  file_extension='.dat'
  Output_filename_x='seismogram_x.txt'
  Output_filename_z='seismogram_z.txt'
  
  Call Create_file(n_file2,filename2_x,file_extension,seismogram_x(:),Output_filename_x,Outpath2)
  Call Create_file(n_file2,filename2_z,file_extension,seismogram_z(:),Output_filename_z,Outpath2)
  
!----------------生成波场快照文件名结束-------------------------

  head(58)=nz+2*ml+1
  head(59)=2000
  irecl1=(nz+2*ml+1)*4+240
  
  Do i=1,n_file
    Open(i+100,file=Outpath1//snapshot_x(i),form='binary',access='direct',status='replace',recl=irecl1)
    Open(i+200,file=Outpath1//snapshot_z(i),form='binary',access='direct',status='replace',recl=irecl1)
  End Do
  
  Do i=1,n_file2
    Open(i+300,file=Outpath1//seismogram_x(i),status='replace')
    Open(i+400,file=Outpath1//seismogram_z(i),status='replace')
  End Do
  
  Do i=1,n_file
    Open(i+500,file=Outpath2//snapshot_x(i),form='binary',access='direct',status='replace',recl=irecl1)
    Open(i+600,file=Outpath2//snapshot_z(i),form='binary',access='direct',status='replace',recl=irecl1)
  End Do
  
  Do i=1,n_file2
    Open(i+700,file=Outpath2//seismogram_x(i),status='replace')
    Open(i+800,file=Outpath2//seismogram_z(i),status='replace')
  End Do
  
  nt2=nt*2
  ii1=max(1,is-10)       
  ii2=min(nx,is+10)      
  jj1=max(1,js-10)       
  jj2=min(nz,js+10)      
  ef1=1225.0/1024.0      
  ef2=245.0/3072.0       
  ef3=441.0/46080.0      
  ef4=5.0/7168.0
  fx=0.0
    
  Do it=1,nt2
    If(mod(it,2).ne.0) Then   !若是奇数则进行下列操作
      iit=(it+1)/2.0
      time=(iit-1)*delt_t          
      Call source_force(fre_wavelet,delay_source_t0,time,fc0)	!调用震源函数 
      Do j=1,nz
        Do i=1,nx
          
          If(iit.le.300) Then
            If(i.ge.ii1.and.i.le.ii2.and.j.ge.jj1.and.j.le.jj2) Then	  
            dxz=((i-is)**2+(j-js)**2)*0.1               
              fx=fc0*exp(-dxz)
            End If
          End If
          
	        a11=txx(i,j,2)-txx(i-1,j-1,2)
	        a12=txx(i+1,j+1,2)-txx(i-2,j-2,2)
	        a13=txx(i+2,j+2,2)-txx(i-3,j-3,2)
	        a14=txx(i+3,j+3,2)-txx(i-4,j-4,2)
          a21=txx(i,j-1,2)-txx(i-1,j,2)
          a22=txx(i+1,j-2,2)-txx(i-2,j+1,2)
          a23=txx(i+2,j-3,2)-txx(i-3,j+2,2)
          a24=txx(i+3,j-4,2)-txx(i-4,j+3,2)
          b11=txz(i,j,2)-txz(i-1,j-1,2)
          b12=txz(i+1,j+1,2)-txz(i-2,j-2,2)
          b13=txz(i+2,j+2,2)-txz(i-3,j-3,2)
          b14=txz(i+3,j+3,2)-txz(i-4,j-4,2)
          b21=txz(i,j-1,2)-txz(i-1,j,2)
          b22=txz(i+1,j-2,2)-txz(i-2,j+1,2)
          b23=txz(i+2,j-3,2)-txz(i-3,j+2,2)
          b24=txz(i+3,j-4,2)-txz(i-4,j+3,2)
	        d11=tzz(i,j,2)-tzz(i-1,j-1,2)
	        d12=tzz(i+1,j+1,2)-tzz(i-2,j-2,2)
	        d13=tzz(i+2,j+2,2)-tzz(i-3,j-3,2)
	        d14=tzz(i+3,j+3,2)-tzz(i-4,j-4,2)
          d21=tzz(i,j-1,2)-tzz(i-1,j,2)
          d22=tzz(i+1,j-2,2)-tzz(i-2,j+1,2)
          d23=tzz(i+2,j-3,2)-tzz(i-3,j+2,2)
          d24=tzz(i+3,j-4,2)-tzz(i-4,j+3,2)
          e11=ts(i,j,2)-ts(i-1,j-1,2)
	        e12=ts(i+1,j+1,2)-ts(i-2,j-2,2)
	        e13=ts(i+2,j+2,2)-ts(i-3,j-3,2)
	        e14=ts(i+3,j+3,2)-ts(i-4,j-4,2)
          e21=ts(i,j-1,2)-ts(i-1,j,2)
          e22=ts(i+1,j-2,2)-ts(i-2,j+1,2)
          e23=ts(i+2,j-3,2)-ts(i-3,j+2,2)
          e24=ts(i+3,j-4,2)-ts(i-4,j+3,2)
          vx(i,j,2)=vx(i,j,1)+delt_t*(D2+D3)*w11*(vx(i,j,1)-vxf(i,j,1))-&
                    D3*r1*((ef1*a11-ef2*a12+ef3*a13-ef4*a14)+(ef1*a21-ef2*a22+ef3*a23-ef4*a24))-&
                    D3*r2*((ef1*b11-ef2*b12+ef3*b13-ef4*b14)-(ef1*b21-ef2*b22+ef3*b23-ef4*b24))+&
                    D2*r1*((ef1*e11-ef2*e12+ef3*e13-ef4*e14)+(ef1*e21-ef2*e22+ef3*e23-ef4*e24))+fx
          vz(i,j,2)=vz(i,j,1)+delt_t*(D2+D3)*w33*(vz(i,j,1)-vzf(i,j,1))-&
                    D3*r1*((ef1*b11-ef2*b12+ef3*b13-ef4*b14)+(ef1*b21-ef2*b22+ef3*b23-ef4*b24))-&
                    D3*r2*((ef1*d11-ef2*d12+ef3*d13-ef4*d14)-(ef1*d21-ef2*d22+ef3*d23-ef4*d24))+&
                    D2*r2*((ef1*e11-ef2*e12+ef3*e13-ef4*e14)-(ef1*e21-ef2*e22+ef3*e23-ef4*e24))
          vxf(i,j,2)=vxf(i,j,1)-delt_t*(D1+D2)*w11*(vx(i,j,1)-vxf(i,j,1))+&
                     D2*r1*((ef1*a11-ef2*a12+ef3*a13-ef4*a14)+(ef1*a21-ef2*a22+ef3*a23-ef4*a24))+&
                     D2*r2*((ef1*b11-ef2*b12+ef3*b13-ef4*b14)-(ef1*b21-ef2*b22+ef3*b23-ef4*b24))-&
                     D1*r1*((ef1*e11-ef2*e12+ef3*e13-ef4*e14)+(ef1*e21-ef2*e22+ef3*e23-ef4*e24))
          vzf(i,j,2)=vzf(i,j,1)-delt_t*(D1+D2)*w33*(vz(i,j,1)-vzf(i,j,1))+&
                     D2*r1*((ef1*b11-ef2*b12+ef3*b13-ef4*b14)+(ef1*b21-ef2*b22+ef3*b23-ef4*b24))+&
                     D2*r2*((ef1*d11-ef2*d12+ef3*d13-ef4*d14)-(ef1*d21-ef2*d22+ef3*d23-ef4*d24))-&
                     D1*r2*((ef1*e11-ef2*e12+ef3*e13-ef4*e14)-(ef1*e21-ef2*e22+ef3*e23-ef4*e24))
        End Do
      End Do
      
      
      
      
      
      
      
      
      

      Do j=-ml,nz+ml     
        Do i=-ml,nx+ml   
          vx(i,j,1)=vx(i,j,2)   !将前一时刻计算的波场值vx(i,j,2)赋值给vx(i,j,1)
          vz(i,j,1)=vz(i,j,2)
          vxf(i,j,1)=vxf(i,j,2)
          vzf(i,j,1)=vzf(i,j,2)
        End Do
      End Do
    
      Do i=1,nx
        vxt(i,iit)=vx(i,ige,2)    !将横坐标为0的前一时刻的波场值赋值给横坐标为0的检波器
        vzt(i,iit)=vz(i,ige,2)
        vxft(i,iit)=vxf(i,ige,2)
        vzft(i,iit)=vzf(i,ige,2)
      End Do
      
      Do i=1,n_file2              !输出合成地震图
        j=6+(i-1)*20
        Write(i+300,*) time,vxt(j,iit)
        Write(i+400,*) time,vzt(j,iit)
      End Do
      
      Do i=1,n_file2              !输出合成地震图
        j=6+(i-1)*20
        Write(i+700,*) time,vxft(j,iit)
        Write(i+800,*) time,vzft(j,iit)
      End Do
              
      If(mod(iit,400).eq.0) Then
        k=0
        Do i=-ml,nx+ml     
          k=k+1
          count=int(iit/400)
          Write(count+100,rec=k) head,(vx(i,j,2),j=-ml,nz+ml) !输出波场快照 
          Write(count+200,rec=k) head,(vz(i,j,2),j=-ml,nz+ml) 
        End Do
      End If
      
      If(mod(iit,400).eq.0) Then
        k=0
        Do i=-ml,nx+ml     
          k=k+1
          count=int(iit/400)
          Write(count+500,rec=k) head,(vxf(i,j,2),j=-ml,nz+ml) !输出波场快照 
          Write(count+600,rec=k) head,(vzf(i,j,2),j=-ml,nz+ml) 
        End Do
      End If
      
      If(mod(iit,10).eq.0) Write(*,*) iit,vx(is,js,2)
      
    Else
      iit=it/2.0
      
      Do j=1,nz
        Do i=1,nx
          a11=vx(i+1,j+1,2)-vx(i,j,2)
          a12=vx(i+2,j+2,2)-vx(i-1,j-1,2)
          a13=vx(i+3,j+3,2)-vx(i-2,j-2,2)
          a14=vx(i+4,j+4,2)-vx(i-3,j-3,2)
          a21=vx(i+1,j,2)-vx(i,j+1,2)
          a22=vx(i+2,j-1,2)-vx(i-1,j+2,2)
          a23=vx(i+3,j-2,2)-vx(i-2,j+3,2)
          a24=vx(i+4,j-3,2)-vx(i-3,j+4,2)
          b11=vz(i+1,j+1,2)-vz(i,j,2)
          b12=vz(i+2,j+2,2)-vz(i-1,j-1,2)
          b13=vz(i+3,j+3,2)-vz(i-2,j-2,2)
          b14=vz(i+4,j+4,2)-vz(i-3,j-3,2)
          b21=vz(i+1,j,2)-vz(i,j+1,2)
          b22=vz(i+2,j-1,2)-vz(i-1,j+2,2)
          b23=vz(i+3,j-2,2)-vz(i-2,j+3,2)
          b24=vz(i+4,j-3,2)-vz(i-3,j+4,2)
          d11=vxf(i+1,j+1,2)-vxf(i,j,2)
          d12=vxf(i+2,j+2,2)-vxf(i-1,j-1,2)
          d13=vxf(i+3,j+3,2)-vxf(i-2,j-2,2)
          d14=vxf(i+4,j+4,2)-vxf(i-3,j-3,2)
          d21=vxf(i+1,j,2)-vxf(i,j+1,2)
          d22=vxf(i+2,j-1,2)-vxf(i-1,j+2,2)
          d23=vxf(i+3,j-2,2)-vxf(i-2,j+3,2)
          d24=vxf(i+4,j-3,2)-vxf(i-3,j+4,2)
          e11=vzf(i+1,j+1,2)-vzf(i,j,2)
          e12=vzf(i+2,j+2,2)-vzf(i-1,j-1,2)
          e13=vzf(i+3,j+3,2)-vzf(i-2,j-2,2)
          e14=vzf(i+4,j+4,2)-vzf(i-3,j-3,2)
          e21=vzf(i+1,j,2)-vzf(i,j+1,2)
          e22=vzf(i+2,j-1,2)-vzf(i-1,j+2,2)
          e23=vzf(i+3,j-2,2)-vzf(i-2,j+3,2)
          e24=vzf(i+4,j-3,2)-vzf(i-3,j+4,2)
          txx(i,j,2)=txx(i,j,1)+r1*c11*((ef1*a11-ef2*a12+ef3*a13-ef4*a14)+(ef1*a21-ef2*a22+ef3*a23-ef4*a24))+&
                                r2*c13*((ef1*b11-ef2*b12+ef3*b13-ef4*b14)-(ef1*b21-ef2*b22+ef3*b23-ef4*b24))+&
                                r1*Q1*((ef1*d11-ef2*d12+ef3*d13-ef4*d14)+(ef1*d21-ef2*d22+ef3*d23-ef4*d24))+&
                                r2*Q1*((ef1*e11-ef2*e12+ef3*e13-ef4*e14)-(ef1*e21-ef2*e22+ef3*e23-ef4*e24))
          tzz(i,j,2)=tzz(i,j,1)+r1*c13*((ef1*a11-ef2*a12+ef3*a13-ef4*a14)+(ef1*a21-ef2*a22+ef3*a23-ef4*a24))+&
                                r2*c33*((ef1*b11-ef2*b12+ef3*b13-ef4*b14)-(ef1*b21-ef2*b22+ef3*b23-ef4*b24))+&
                                r1*Q3*((ef1*d11-ef2*d12+ef3*d13-ef4*d14)+(ef1*d21-ef2*d22+ef3*d23-ef4*d24))+&
                                r2*Q3*((ef1*e11-ef2*e12+ef3*e13-ef4*e14)-(ef1*e21-ef2*e22+ef3*e23-ef4*e24))
          txz(i,j,2)=txz(i,j,1)+r1*c44*((ef1*b11-ef2*b12+ef3*b13-ef4*b14)+(ef1*b21-ef2*b22+ef3*b23-ef4*b24))+&
                                r2*c44*((ef1*a11-ef2*a12+ef3*a13-ef4*a14)-(ef1*a21-ef2*a22+ef3*a23-ef4*a24))
          ts(i,j,2)=ts(i,j,1)+r1*Q1*((ef1*a11-ef2*a12+ef3*a13-ef4*a14)+(ef1*a21-ef2*a22+ef3*a23-ef4*a24))+&
                              r2*Q3*((ef1*b11-ef2*b12+ef3*b13-ef4*b14)-(ef1*b21-ef2*b22+ef3*b23-ef4*b24))+&
                              r1*R*((ef1*d11-ef2*d12+ef3*d13-ef4*d14)+(ef1*d21-ef2*d22+ef3*d23-ef4*d24))+&
                              r2*R*((ef1*e11-ef2*e12+ef3*e13-ef4*e14)-(ef1*e21-ef2*e22+ef3*e23-ef4*e24))
        End Do
      End Do
      
      
      
      
      
      
      
      
      
      

      Do j=-ml,nz+ml   
        Do i=-ml,nx+ml 
          txx(i,j,1)=txx(i,j,2)
          tzz(i,j,1)=tzz(i,j,2)
          txz(i,j,1)=txz(i,j,2)
          ts(i,j,1)=ts(i,j,2)
        End Do
      End Do 
      
    End If
  End Do
  
  Do i=1,n_file
    Close(i+100)
    Close(i+200)
  End Do
  
  Do i=1,n_file2
    Close(i+300)
    Close(i+400)
  End Do
  
  Do i=1,n_file
    Close(i+500)
    Close(i+600)
  End Do
  
  Do i=1,n_file2
    Close(i+700)
    Close(i+800)
  End Do
  
  irecl2=nt*4+240
  head(58)=nt
  head(59)=delt_t*1000000
  
  Open(16,file=Outpath1//'synthetic_seismic_record_x.sgy',form='binary',access='direct',status='replace',recl=irecl2)
  Open(17,file=Outpath1//'synthetic_seismic_record_z.sgy',form='binary',access='direct',status='replace',recl=irecl2)
  Do i=ig1,ig2
    ii=i-ig1+1
    Write(16,rec=ii) head,(vxt(i,j),j=1,nt)
    Write(17,rec=ii) head,(vzt(i,j),j=1,nt)
  End Do
  Close(16)
  Close(17)
  
  Open(18,file=Outpath2//'synthetic_seismic_record_x.sgy',form='binary',access='direct',status='replace',recl=irecl2)
  Open(19,file=Outpath2//'synthetic_seismic_record_z.sgy',form='binary',access='direct',status='replace',recl=irecl2)
  Do i=ig1,ig2
    ii=i-ig1+1
    Write(18,rec=ii) head,(vxft(i,j),j=1,nt)
    Write(19,rec=ii) head,(vzft(i,j),j=1,nt)
  End Do
  Close(18)
  Close(19)
  
  Deallocate(snapshot_x,snapshot_z)
  Deallocate(seismogram_x,seismogram_z)
  
  vx_file='seismogram_x.txt'
  vz_file='seismogram_z.txt'
  
  !Call grapher_seismograms(n_file2,nt,vx_file,vz_file,Outpath1)
  !Call grapher_seismograms(n_file2,nt,vx_file,vz_file,Outpath2)
    
End Subroutine Wave_Field_Modeling